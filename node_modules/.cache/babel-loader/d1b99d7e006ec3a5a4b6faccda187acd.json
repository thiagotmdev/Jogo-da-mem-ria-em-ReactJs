{"ast":null,"code":"var _jsxFileName = \"C:\\\\Bonieky\\\\Reactjs\\\\Projetos\\\\react_memoria\\\\src\\\\App.tsx\",\n    _s = $RefreshSig$();\n\nimport * as C from './App.styles';\nimport logoImage from './assets/devmemory_logo.png';\nimport { InfoItem } from './components/InfoItem';\nimport { Button } from './components/Button';\nimport RestartIcon from './svgs/restart.svg';\nimport { useEffect, useState } from 'react';\nimport { items } from './data/items';\nimport { GridItem } from './components/GridItem';\nimport { formatTimeElapsed } from './helpers/formatTimeElapsed';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  const [playing, setPlaying] = useState(false);\n  const [timeElapsed, setTimeElapsed] = useState(0);\n  const [moveCount, setMoveCount] = useState(0);\n  const [showCount, setShowCount] = useState(0);\n  const [gridItems, setGridItems] = useState([]);\n  useEffect(() => resetAndCreateGrid(), []);\n  useEffect(() => {\n    const timer = setInterval(() => {\n      if (playing) {\n        setTimeElapsed(timeElapsed + 1);\n      }\n    }, 1000);\n    return () => clearInterval(timer);\n  }, [playing, timeElapsed]);\n  useEffect(() => {\n    if (showCount === 2) {\n      let opened = gridItems.filter(item => item.shown === true);\n\n      if (opened.length === 2) {\n        //v1 = if both are equals, make every \"shown\" permanent\n        if (opened[0].item === opened[1].item) {\n          let tmpGrid = [...gridItems];\n\n          for (let i in tmpGrid) {\n            if (tmpGrid[i].shown) {\n              tmpGrid[i].permanentShown = true;\n              tmpGrid[i].shown = false;\n            }\n          }\n\n          setGridItems(tmpGrid);\n          setShowCount(0);\n        } else {\n          //v2 - if they are not equals, close all \"shown\"\n          setTimeout(() => {\n            let tmpGrid = [...gridItems];\n\n            for (let i in tmpGrid) {\n              tmpGrid[i].shown = false;\n            }\n\n            setGridItems(tmpGrid);\n            setShowCount(0);\n          }, 1000);\n        }\n      }\n    }\n  }, [showCount, gridItems]); // Essa parte monitora os dados em showCount e gridItems\n  //Verify if game is over\n\n  useEffect(() => {\n    if (moveCount > 0 && gridItems.every(item => item.permanentShown === true)) {\n      setPlaying(false);\n    }\n  }, [moveCount, gridItems]);\n\n  const resetAndCreateGrid = () => {\n    // passo 1 - resetar o jogo\n    setTimeElapsed(0);\n    setMoveCount(0);\n    setShowCount(0); // passo 2 - criar o grid e começar o jogo\n    // 2.1 - criar um grid vazio\n\n    let tmpGrid = [];\n\n    for (let i = 0; i < items.length * 2; i++) tmpGrid.push({\n      item: null,\n      shown: false,\n      permanentShown: false\n    }); // 2.2 - preencher o grid\n\n\n    for (let w = 0; w < 2; w++) {\n      for (let i = 0; i < items.length; i++) {\n        let pos = -1;\n\n        while (pos < 0 || tmpGrid[pos].item !== null) {\n          pos = Math.floor(Math.random() * (items.length * 2));\n        }\n\n        tmpGrid[pos].item = i;\n      }\n    } // 2.3 - jogar no state\n\n\n    setGridItems(tmpGrid); // passo 3  - começar o jogo\n\n    setPlaying(true);\n  };\n\n  const handleItemClick = index => {\n    if (playing && index !== null && showCount < 2) {\n      let tmpGrid = [...gridItems];\n\n      if (tmpGrid[index].permanentShown === false && tmpGrid[index].shown === false) {\n        tmpGrid[index].shown = true;\n        setShowCount(showCount + 1);\n      }\n\n      setGridItems(tmpGrid);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(C.Container, {\n    children: [/*#__PURE__*/_jsxDEV(C.Info, {\n      children: [/*#__PURE__*/_jsxDEV(C.LogoLink, {\n        href: \"\",\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: logoImage,\n          width: \"200\",\n          alt: \"\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(C.InfoArea, {\n        children: [/*#__PURE__*/_jsxDEV(InfoItem, {\n          label: \"Tempo\",\n          value: formatTimeElapsed(timeElapsed)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(InfoItem, {\n          label: \"Movimentos\",\n          value: moveCount.toString()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        label: \"Reiniciar\",\n        icon: RestartIcon,\n        onClick: resetAndCreateGrid\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(C.GridArea, {\n      children: /*#__PURE__*/_jsxDEV(C.Grid, {\n        children: gridItems.map((item, index) => /*#__PURE__*/_jsxDEV(GridItem, {\n          item: item,\n          onClick: () => handleItemClick(index)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 11\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 110,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"UcxrWfUwEKWVsqFcPnoA4Mhp8g4=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["C","logoImage","InfoItem","Button","RestartIcon","useEffect","useState","items","GridItem","formatTimeElapsed","App","playing","setPlaying","timeElapsed","setTimeElapsed","moveCount","setMoveCount","showCount","setShowCount","gridItems","setGridItems","resetAndCreateGrid","timer","setInterval","clearInterval","opened","filter","item","shown","length","tmpGrid","i","permanentShown","setTimeout","every","push","w","pos","Math","floor","random","handleItemClick","index","toString","map"],"sources":["C:/Bonieky/Reactjs/Projetos/react_memoria/src/App.tsx"],"sourcesContent":["import * as C from './App.styles';\nimport logoImage from './assets/devmemory_logo.png'\nimport { InfoItem } from './components/InfoItem';\nimport { Button } from './components/Button';\nimport RestartIcon from './svgs/restart.svg';\nimport { useEffect, useState } from 'react';\nimport { GridItemType } from './types/GridItemType';\nimport { items } from './data/items';\nimport { GridItem } from './components/GridItem';\nimport { formatTimeElapsed } from './helpers/formatTimeElapsed';\n\nconst App = ()=>{\n\n  const [playing, setPlaying] = useState<boolean>(false);\n  const [timeElapsed, setTimeElapsed] = useState<number>(0);\n  const [moveCount, setMoveCount] = useState<number>(0);\n  const [showCount, setShowCount] = useState<number>(0);\n  const [gridItems, setGridItems] = useState<GridItemType[]>([]);\n\n  useEffect(()=> resetAndCreateGrid(), []);\n\n  useEffect(()=>{\n    const timer = setInterval(()=>{\n      if(playing){\n        setTimeElapsed(timeElapsed + 1);\n      }\n    }, 1000);\n    return()=>clearInterval(timer);\n  }, [playing, timeElapsed]);\n\n  useEffect(()=>{\n    if(showCount === 2){\n      let opened = gridItems.filter(item => item.shown === true);\n      if(opened.length === 2){\n\n        //v1 = if both are equals, make every \"shown\" permanent\n        if(opened[0].item === opened[1].item){\n          let tmpGrid = [...gridItems];\n          for(let i in tmpGrid){\n            if(tmpGrid[i].shown){\n              tmpGrid[i].permanentShown = true;\n              tmpGrid[i].shown = false;\n            }\n          }\n          setGridItems(tmpGrid);\n          setShowCount(0);\n        }else{\n          //v2 - if they are not equals, close all \"shown\"\n          setTimeout(()=>{\n            let tmpGrid = [...gridItems];\n            for(let i in tmpGrid){\n              tmpGrid[i].shown = false;\n            }\n            setGridItems(tmpGrid);\n            setShowCount(0);\n          }, 1000);\n        }\n      }\n    }\n  }, [showCount, gridItems]); // Essa parte monitora os dados em showCount e gridItems\n\n  //Verify if game is over\n  useEffect(()=>{\n    if(moveCount > 0 && gridItems.every(item=> item.permanentShown === true)){\n      setPlaying(false);\n    }\n  }, [moveCount, gridItems]);\n\n  const resetAndCreateGrid = ()=>{\n    // passo 1 - resetar o jogo\n    setTimeElapsed(0);\n    setMoveCount(0);\n    setShowCount(0);\n\n    // passo 2 - criar o grid e começar o jogo\n\n    // 2.1 - criar um grid vazio\n    let tmpGrid: GridItemType[] = [];\n    for (let i = 0; i < (items.length * 2); i++)tmpGrid.push({item: null, shown:false, permanentShown: false});\n\n    // 2.2 - preencher o grid\n    for(let w =0; w < 2; w++){\n      for(let i =0; i < items.length; i++){\n        let pos = -1;\n        while(pos < 0 || tmpGrid[pos].item !== null){\n          pos = Math.floor(Math.random() *  (items.length * 2));\n        }\n        tmpGrid[pos].item = i;\n      }\n    }\n    // 2.3 - jogar no state\n    setGridItems(tmpGrid);\n\n    // passo 3  - começar o jogo\n    setPlaying(true);\n  }\n\n  const handleItemClick = (index: number)=>{\n    if(playing && index !== null &&showCount < 2){\n      let tmpGrid= [...gridItems];\n      if(tmpGrid[index].permanentShown === false && tmpGrid[index].shown === false){\n        tmpGrid[index].shown = true;\n        setShowCount(showCount + 1);\n      }\n      setGridItems(tmpGrid);\n    }\n  }\n\n  return(\n    <C.Container>\n      <C.Info>\n        <C.LogoLink href=\"\">\n          <img src={logoImage} width=\"200\" alt=\"\"/>\n        </C.LogoLink>\n\n        <C.InfoArea>\n          <InfoItem label='Tempo' value={formatTimeElapsed(timeElapsed)}/>\n          <InfoItem label='Movimentos' value={moveCount.toString()}/>\n        </C.InfoArea>\n\n        <Button label='Reiniciar' icon={RestartIcon} onClick={resetAndCreateGrid}/>\n      </C.Info>\n      <C.GridArea>\n        <C.Grid>\n        {gridItems.map((item, index)=>(\n          <GridItem\n            key = {index}\n            item = {item}\n            onClick={()=> handleItemClick(index)}\n          />\n        ))}\n        </C.Grid>\n      </C.GridArea>\n    </C.Container>\n  );\n}\n\nexport default App;"],"mappings":"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"},"metadata":{},"sourceType":"module"}